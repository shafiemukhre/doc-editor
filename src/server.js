/**
 * DO NOT EDIT THIS FILE
 */
import { setupWorker, rest } from "msw";
import { changeType } from "./utils/types";

// ===================================================
// Turn these on/off to customize how the API behaves.
const IS_SLOW = false;
const IS_FLAKY = false;

const shouldErrorOut = () => {
  return IS_FLAKY && Math.random() > 0.5;
};
// ===================================================

const delay = IS_SLOW ? 2000 : 0;
let state = "";

const processChange = (prevText, change) => {
  if (change.type === changeType.ADD) {
    return (
      prevText.slice(0, change.index) + change.char + state.slice(change.index)
    );
  }

  if (change.type === changeType.DELETE) {
    return prevText.slice(0, change.index) + prevText.slice(change.index + 1);
  }

  return (
    prevText.slice(0, change.index) +
    change.char +
    prevText.slice(change.index + 1)
  );
};

const worker = setupWorker(
  // Endpoint to get data
  rest.get("/api/doc", async (req, res, ctx) => {
    if (shouldErrorOut()) {
      return res(ctx.status(500));
    }

    return res(ctx.delay(delay), ctx.json({ content: state }));
  }),

  // Endpoint to clear data
  rest.put("/api/clear", async (req, res, ctx) => {
    if (shouldErrorOut()) {
      return res(ctx.status(500));
    }

    state = "";

    return res(
      ctx.delay(delay),
      ctx.json({
        content: state,
      })
    );
  }),

  // Endpoint to update data
  rest.put("/api/update", async (req, res, ctx) => {
    if (shouldErrorOut()) {
      return res(ctx.status(500));
    }

    const body = await req.json();

    const changes = body.changes;

    changes.forEach((change) => {
      state = processChange(state, change);
    });

    return res(
      ctx.delay(delay),
      ctx.json({
        content: state,
      })
    );
  })
);

worker.start({
  quiet: true,
  onUnhandledRequest: "bypass",
});
